{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"```\r\n                              ______        ___________\r\n_______________________      ____  /_______ ___  /__  /\r\n__  ___/_  __ \\  __ \\_ | /| / /_  __ \\  __ `/_  /__  / \r\n_(__  )_  / / / /_/ /_ |/ |/ /_  /_/ / /_/ /_  / _  /  \r\n/____/ /_/ /_/\\____/____/|__/ /_.___/\\__,_/ /_/  /_/  \r\n                                                              \r\n  Makes your front-end code roll\r\n```\r\n\r\n# What?\r\nSnowball enables you to:\r\n\r\n  - Use npm for dependency management\r\n  - Run your front-end javascript on a server with ease (i.e. running tests on a CI server)\r\n  - Serve pre-defined bundles through Sinatra\r\n  - Compile and minifiy all your JavaScript in a pre-deploy step\r\n  - Write your front-end code in CoffeeScript\r\n  - Serve pre-compiled Jade templates for your front-end\r\n\r\n# Why?\r\nBecause:\r\n\r\n  - [Sprockets](https://github.com/sstephenson/sprockets) is kinda cumbersome when you have a large number of dependencies.\r\n  - [npm](http://npmjs.org) is really really good at managing dependencies for you.\r\n\r\n# How?\r\n  - It uses [browserify](https://github.com/substack/node-browserify) magic to search your code for require() statements and figure\r\n    out which dependencies to include in the bundle.\r\n\r\n## FAQ\r\n\r\n### Oh, but I depend on a javascript library that is not in the npm repository!\r\n\r\nNo problem, really! You can still require reqular files in your bundle files like this:\r\n  \r\n```js\r\n  require(\"./path/to/my-esoteric-lib.js\")\r\n```\r\n\r\n### Oh, but I have a lot of javascript code that is not written as Node modules!\r\n\r\nReally? Then you should start converting right away.\r\n\r\nThe only thing you need to make sure is that your esoteric library follows the [CommonJS / Modules spec](http://wiki.commonjs.org/wiki/Modules/1.1) \r\nand adds itself to the `exports` object. This is how [underscore.js](http://underscorejs.org/docs/underscore.html#section-10) does that:\r\n```js\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = _;\r\n  }\r\n  exports._ = _;\r\n} else {\r\n  root['_'] = _;\r\n}\r\n```\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'snowball'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\n## Usage\r\n\r\n# Define a bundle\r\n\r\nDefining a bundle is as easy as creating a javascript file and require() your dependencies. Then you just \r\nadd the containing folder to the Snowball search path, configure the endpoint you'd like to\r\nserve bundles from, and you are good to go.\r\n\r\nI.e. given the follwing project layout:\r\n\r\n```\r\nmyapp\r\n  |- js\r\n      |- all.js\r\n```\r\n```js\r\n          var $ = require(\"jquery\");\r\n          var Backbone = require(\"backbone\");\r\n          var myJsApp = require(\"myjsapp\").App;\r\n          myJsApp.init()\r\n```\r\n```\r\n      |- minimal.js\r\n```\r\n```js\r\n          var $ = require(\"jquery\");\r\n          var myTinyVersion = require(\"tinyapp\").TinyApp;\r\n          myTinyVersion.init();\r\n```\r\n```\r\n  |- my_app.rb\r\n```\r\n```ruby\r\n    class MyApp extends Sinatra::Base\r\n      register Sinatra::Snowball\r\n      snowball do\r\n        set_serve_path \"/bundles\"\r\n        add_load_path \"js\"\r\n      end\r\n      # (...)\r\n    end\r\n```\r\n\r\nNow your bundles are available from /bundles/all.js and /bundles/minimal.js and all dependencies are automatically\r\nresolved and concatenated into that file\r\n\r\n# Precompiling bundles pre-deploy\r\n\r\nExample rake task that takes a an entry file, concatenates and compresses it to a target file.\r\n\r\n```ruby\r\nnamespace :snowball do\r\n  target = './public/all.js'\r\n  entryfile = './js/all.coffee'\r\n\r\n  desc \"Roll a new javascript bundle\"\r\n  task :roll do\r\n    require \"uglifier\"\r\n    require \"snowball/roller\"\r\n    puts \"Rolling...\"\r\n    File.open(target, 'w') do |f|\r\n      f.write(Uglifier.compile(Snowball::Roller.new(entryfile).roll))\r\n    end\r\n    puts \"Done!\"\r\n  end\r\nend\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request","name":"Snowball","tagline":"Makes your front-end code roll","google":""}